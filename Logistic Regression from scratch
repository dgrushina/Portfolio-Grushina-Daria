{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import annotations\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "pd.set_option('display.max_rows', 100)\n",
    "pd.set_option('display.max_columns', 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Логистическая регрессия с нуля с применением градиентного спусука и стохастического градиентного спуска"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.base import BaseEstimator\n",
    "\n",
    "class LogReg(BaseEstimator):\n",
    "    def __init__(self, gd_type: str = 'stochastic', tolerance: float = 1e-4, \n",
    "                 max_iter: int = 1000, eta: float = 1e-2,\n",
    "                 w0: np.array = None) -> None:\n",
    "        \"\"\"\n",
    "        Args:\n",
    "          gd_type: Type of gradient descent ('full' or 'stochastic'). \n",
    "          \n",
    "          tolerance: Threshold for stopping gradient descent.\n",
    "          \n",
    "          max_iter: Maximum number of steps in gradient descent.\n",
    "          \n",
    "          eta: Learning rate.\n",
    "          \n",
    "          w0: Array of shape d (d — number of weights to optimize).\n",
    "              Initial weights.\n",
    "        \"\"\"\n",
    "        self.gd_type = gd_type\n",
    "        self.tolerance = tolerance\n",
    "        self.max_iter = max_iter\n",
    "        self.eta = eta\n",
    "        self.w0 = w0\n",
    "        self.w = None\n",
    "        self.loss_history = None \n",
    "    \n",
    "    def fit(self, X: np.array, y: np.array) -> LogReg:\n",
    "        \"\"\"Fit the model on training data. Also, save value of loss after each iteration.\n",
    "        \n",
    "        Args:\n",
    "          X: Training data.\n",
    "          \n",
    "          y: Target.\n",
    "        \n",
    "        Returns: \n",
    "          self: Fitted classsifier. \n",
    "        \"\"\"\n",
    "        self.loss_history = []\n",
    "        \n",
    "        dimensions_x = np.shape(X)\n",
    "        rows_x, columns_x = dimensions_x\n",
    "        \n",
    "        self.w = np.ones((columns_x,), dtype=float)\n",
    "        \n",
    "        \n",
    "        for i in range(self.max_iter+1):\n",
    "            \n",
    "            previous_iteration = self.w\n",
    "            y_pred = 1/(1 + np.exp(-np.dot(X, self.w)))\n",
    "            Loss_function = self.calc_loss(X, y)\n",
    "            self.loss_history.append(Loss_function)\n",
    "            Gradient_L = self.calc_gradient(X, y)\n",
    "            self.w = self.w - self.eta*np.array(Gradient_L, dtype=float)\n",
    "            \n",
    "            if np.linalg.norm(self.w - previous_iteration) < 10**(-6):\n",
    "                \n",
    "                break\n",
    "                \n",
    "        \n",
    "        return self\n",
    "    \n",
    "    \n",
    "    def predict_proba(self, X: np.array) -> np.array:\n",
    "        \"\"\"Calculate probability of positive and negative class for each observation.\n",
    "        \n",
    "        Args:\n",
    "          X: Array of shape (n, d).\n",
    "             Data.\n",
    "        \n",
    "        Returns: \n",
    "             Array of shape (n, 2).\n",
    "             Predicted probabilities.\n",
    "        \"\"\"\n",
    "        if self.w is None:\n",
    "            raise Exception('Not trained yet')\n",
    "        \n",
    "        dimensions_x = np.shape(X)\n",
    "        rows_x, columns_x = dimensions_x\n",
    "        \n",
    "        predict_proba_returns = np.ones((rows_x, 2), dtype=int)\n",
    "        \n",
    "        predict_proba_returns[:, 0] = 1/(1 + np.exp(-np.dot(X, np.transpose(self.w))))\n",
    "        predict_proba_returns[:, 1] = predict_proba_returns[:, 1] - 1/(1 + np.exp(-np.dot(X, np.transpose(self.w))))\n",
    "        \n",
    "        \n",
    "        return predict_proba_returns\n",
    "    \n",
    "    \n",
    "    def predict(self, X: np.array, threshold = 0.5) -> np.array:\n",
    "        \"\"\"Predict class for each observation.\n",
    "        \n",
    "        Args:\n",
    "          X: Array of shape (n, d).\n",
    "             Data.\n",
    "        \n",
    "        Returns: \n",
    "             Array of shape (n,).\n",
    "             Predicted class labels.  \n",
    "        \"\"\"\n",
    "        if self.w is None:\n",
    "            raise Exception('Not trained yet')\n",
    "            \n",
    "        y_pred = 1/(1 + np.exp(-np.dot(X, self.w)))\n",
    "        \n",
    "        y_pred[y_pred >= threshold] = 1\n",
    "        y_pred[y_pred < threshold] = 0\n",
    "        \n",
    "        return y_pred\n",
    "    \n",
    "    def calc_gradient(self, X: np.array, y: np.array) -> np.array:\n",
    "        \n",
    "       \n",
    "        \n",
    "        \"\"\"Calculate gradient of loss function after each iteration.\n",
    "        \n",
    "        Args:\n",
    "          X: Array of shape (n, d), n can be equal to 1 if 'stochastic'.\n",
    "          y: Array of shape (n,).\n",
    "        \n",
    "        Returns:\n",
    "          Array of shape (d,).\n",
    "          Gradient of loss function after current iteration.\n",
    "        \"\"\"\n",
    "        dimensions_y = np.shape(y)\n",
    "        rows_y, = dimensions_y\n",
    "        \n",
    "        dimensions_x = np.shape(X)\n",
    "        rows_x, columns_x = dimensions_x\n",
    "        \n",
    "        y_pred = 1/(1 + np.exp(-np.dot(X, self.w)))\n",
    "        \n",
    "        if self.gd_type =='stochastic':\n",
    "            \n",
    "            n = np.random.randint(columns_x)\n",
    "            \n",
    "            grad = (1/(columns_x))*np.sum(np.dot((y_pred[n]-y[n]), X[:, n]))\n",
    "            \n",
    "        if self.gd_type == 'full':\n",
    "            \n",
    "            #gradient of Logistic Loss Function, calculated manually\n",
    "        \n",
    "            grad = (1/(columns_x))*np.sum(np.dot((y_pred-y), X))\n",
    "        \n",
    "        return grad\n",
    "                                      \n",
    "    def calc_loss(self, X: np.array, y: np.array) -> float:\n",
    "        \"\"\"Calculate value of loss function after each iteration.\n",
    "        \n",
    "        Args:\n",
    "          X: Array of shape (n, d).\n",
    "          y: Array of shape (n,).\n",
    "        \n",
    "        Returns:\n",
    "          Value of loss function after current iteration.\n",
    "        \"\"\" \n",
    "        dimensions_y = np.shape(y)\n",
    "        rows_y, = dimensions_y\n",
    "        \n",
    "        y_pred = 1/(1 + np.exp(-np.dot(X, self.w)))\n",
    "        \n",
    "        #in order not to put zeros into logs (as it will cause nans and infs in loss function)\n",
    "        #i added a small number to y_pred\n",
    "        \n",
    "        \n",
    "        log_y_pred = np.log(y_pred+1e-9)\n",
    "        \n",
    "        log_y_minus_one_pred = np.log(1-y_pred+1e-9)\n",
    "        \n",
    "        \n",
    "\n",
    "            \n",
    "        loss = -(1/(rows_y))*np.sum(np.dot(y, log_y_pred))-(1/(rows_y))*np.sum(np.dot((1-y), log_y_minus_one_pred))\n",
    "        \n",
    "        \n",
    "        return loss\n",
    "    \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Генерация синтетических данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import make_classification\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X, y = make_classification(\n",
    "    n_samples=10000, n_features=10, n_informative=5, n_redundant=5,\n",
    "    random_state=42)\n",
    "\n",
    "def normalize_data(X):\n",
    "    mean = np.mean(X, axis=0)\n",
    "    std = np.std(X, axis=0)\n",
    "    return (X-mean) / std\n",
    "\n",
    "X = normalize_data(X)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Обучение написанной логистической регрессии"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 1., ..., 1., 1., 1.])"
      ]
     },
     "execution_count": 269,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LogReg_SGD = LogReg()\n",
    "\n",
    "LogReg_SGD.fit(X_train, y_train)\n",
    "LogReg_SGD.predict(X_test)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Loss Function Score (SGD)')"
      ]
     },
     "execution_count": 270,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Stochastic Gradient Descent\n",
    "\n",
    "Loss_function_score = []\n",
    "\n",
    "for i in range(1,100):\n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=(i/100), random_state = 42)\n",
    "    LogReg_SGD.fit(X_train, y_train)\n",
    "    Loss_function_score.append(LogReg_SGD.calc_loss(X_test, y_test))\n",
    "\n",
    "plt.plot(range(1,100), Loss_function_score, label='Loss Function Score')\n",
    "\n",
    "plt.xlabel('The percentage of the training sample')\n",
    "plt.ylabel('Loss Function Score (SGD)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Loss Function Score')"
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Full Gradient Descent\n",
    "\n",
    "Loss_function_score_2 = []\n",
    "LogReg_FGD = LogReg(gd_type='full')\n",
    "\n",
    "for i in range(1,100):\n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=(i/100), random_state = 42)\n",
    "    LogReg_FGD.fit(X_train, y_train)\n",
    "    Loss_function_score_2.append(LogReg_FGD.calc_loss(X_test, y_test))\n",
    "\n",
    "plt.plot(range(1,100), Loss_function_score_2, label='Loss Function Score')\n",
    "\n",
    "plt.xlabel('The percentage of the training sample (FGD)')\n",
    "plt.ylabel('Loss Function Score')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [],
   "source": [
    "#I calculated ROC-AUC and PR-AUC for SGD only, because calculation for the FGD would take too long.\n",
    "#If necessary, one can change the settings to 'full' Gradient Descent\n",
    "\n",
    "#Default Threshold is 0.5\n",
    "\n",
    "Pos = np.count_nonzero(y_test)\n",
    "Neg = len(y_test) - Pos\n",
    "\n",
    "\n",
    "tpr_list = []\n",
    "fpr_list = []\n",
    "\n",
    "precision_list = []\n",
    "recall_list = []\n",
    "\n",
    "\n",
    "negative = 0.0\n",
    "positive = 1.0\n",
    "\n",
    "for i in range(1,101):\n",
    "    \n",
    "    y_prediction = LogReg_SGD.predict(X_test, threshold = i/100)\n",
    "    \n",
    "    tp = np.sum(np.logical_and(y_prediction == positive, y_test == positive))\n",
    "    fp = np.sum(np.logical_and(y_prediction == positive, y_test == negative))\n",
    "    \n",
    "    #an additional step so we do not get nans and inifinities (they won't allow to draw PR curve)\n",
    "    \n",
    "    if np.count_nonzero(y_prediction) !=0:\n",
    "        Precision = tp/(np.count_nonzero(y_prediction))\n",
    "    else:\n",
    "        if tp == 0:\n",
    "            Precision = 1\n",
    "        else:\n",
    "            Precision = 0\n",
    "        \n",
    "    Recall = tp/Pos\n",
    "    precision_list.append(Precision)\n",
    "    recall_list.append(Recall)\n",
    "    \n",
    "    TPR = tp/Pos\n",
    "    FPR = fp/Neg\n",
    "    tpr_list.append(TPR)\n",
    "    fpr_list.append(FPR)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5781533716997428\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'True Positive Rate')"
      ]
     },
     "execution_count": 272,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Implementing the trapezoidal rule for counting space under the curve\n",
    "\n",
    "roc_auc = -np.trapz(tpr_list, x=fpr_list)\n",
    "print(auc)\n",
    "plt.plot(fpr_list, tpr_list)\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6938109476642098\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Recall')"
      ]
     },
     "execution_count": 273,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Pay attention to the scale of a graphic, please (Recall minimum is 0.6)\n",
    "\n",
    "pr_auc = -np.trapz(precision_list, x=recall_list)\n",
    "print(pr_auc)\n",
    "\n",
    "plt.plot(recall_list, precision_list)\n",
    "plt.xlabel('Precision')\n",
    "plt.ylabel('Recall')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'fit_time': array([0.35272408, 0.12940288, 0.46385908, 0.17769098, 0.33734488,\n",
      "       0.2220571 , 0.5081408 , 0.56524205, 0.33002305, 0.36445785]), 'score_time': array([0.00159097, 0.0004909 , 0.00045991, 0.00184703, 0.00047326,\n",
      "       0.00053191, 0.00045991, 0.00053716, 0.00043797, 0.00047493]), 'test_roc_auc': array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]), 'train_roc_auc': array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]), 'test_average_precision': array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]), 'train_average_precision': array([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan])}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n",
      "/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:770: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 71, in _cached_call\n",
      "    return cache[method]\n",
      "KeyError: 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 355, in _score\n",
      "    y_pred = method_caller(clf, \"decision_function\", X)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 73, in _cached_call\n",
      "    result = getattr(estimator, method)(*args, **kwargs)\n",
      "AttributeError: 'LogReg' object has no attribute 'decision_function'\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 761, in _score\n",
      "    scores = scorer(estimator, X_test, y_test)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 103, in __call__\n",
      "    score = scorer._score(cached_call, estimator, *args, **kwargs)\n",
      "  File \"/Users/alina/opt/anaconda3/lib/python3.9/site-packages/sklearn/metrics/_scorer.py\", line 372, in _score\n",
      "    y_pred = self._select_proba_binary(y_pred, clf.classes_)\n",
      "AttributeError: 'LogReg' object has no attribute 'classes_'\n",
      "\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "#I tried to complete the task using builtin methods, but it seems they cannot be applied \n",
    "#to our custom LogReg function, so I wrote K-fold cross validation myself + calculated ROC-AUC and PR-AUC \n",
    "\n",
    "#from sklearn.model_selection import cross_val_score\n",
    "#from sklearn.model_selection import cross_validate\n",
    "\n",
    "#scores = cross_validate(LogReg_SGD, X_train, y_train, cv=10, scoring=('roc_auc', 'average_precision'), return_train_score=True)\n",
    "\n",
    "#mean_score_roc_auc = cross_val_score(LogReg, X, y, scoring=\"roc_auc\", cv = 10).mean()\n",
    "#std_score_roc_auc = cross_val_score(LogReg, X, y, scoring=\"roc_auc\", cv = 10).std()\n",
    "\n",
    "#mean_score_pr_auc = cross_val_score(LogReg, X, y, scoring=\"average_precision\", cv = 10).mean()\n",
    "#std_score_pr_auc = cross_val_score(LogReg, X, y, scoring=\"average_precision\", cv = 10).std()\n",
    "\n",
    "#print(scores)\n",
    "#print(std_score_roc_auc)\n",
    "\n",
    "#print(mean_score_pr_auc)\n",
    "#print(std_score_pr_auc)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scores_count(LogReg, y_test):\n",
    "    Pos = np.count_nonzero(y_test)\n",
    "    Neg = len(y_test) - Pos\n",
    "\n",
    "\n",
    "    tpr_list = []\n",
    "    fpr_list = []\n",
    "\n",
    "    precision_list = []\n",
    "    recall_list = []\n",
    "\n",
    "\n",
    "    negative = 0.0\n",
    "    positive = 1.0\n",
    "\n",
    "    for i in range(1,101):\n",
    "    \n",
    "        y_prediction = LogReg_SGD.predict(X_test, threshold = i/100)\n",
    "    \n",
    "        tp = np.sum(np.logical_and(y_prediction == positive, y_test == positive))\n",
    "        tn = np.sum(np.logical_and(y_prediction == negative, y_test == negative))\n",
    "        fp = np.sum(np.logical_and(y_prediction == positive, y_test == negative))\n",
    "        fn = np.sum(np.logical_and(y_prediction == negative, y_test == positive))\n",
    "    \n",
    "        if np.count_nonzero(y_prediction) !=0:\n",
    "            Precision = tp/(np.count_nonzero(y_prediction))\n",
    "        else:\n",
    "            if tp == 0:\n",
    "                Precision = 1\n",
    "            else:\n",
    "                Precision = 0\n",
    "        \n",
    "        Recall = tp/Pos\n",
    "        precision_list.append(Precision)\n",
    "        recall_list.append(Recall)\n",
    "    \n",
    "        TPR = tp/Pos\n",
    "        FPR = fp/Neg\n",
    "        tpr_list.append(TPR)\n",
    "        fpr_list.append(FPR)\n",
    "        \n",
    "    return tpr_list, fpr_list, precision_list, recall_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "strtfdKFold = StratifiedKFold(n_splits=10)\n",
    "kfold = strtfdKFold.split(X_train, y_train)\n",
    "roc_auc_scores = []\n",
    "pr_auc_scores = []\n",
    "\n",
    "for k, (train, test) in enumerate(kfold):\n",
    "    LogReg_SGD.fit(X_train[train, :], y_train[train])\n",
    "    roc_auc = -np.trapz(scores_count(LogReg_SGD, y_test)[0], x=scores_count(LogReg_SGD, y_test)[1])\n",
    "    pr_auc = -np.trapz(scores_count(LogReg_SGD, y_test)[2], x=scores_count(LogReg_SGD, y_test)[3])\n",
    "    roc_auc_scores.append(roc_auc)\n",
    "    pr_auc_scores.append(pr_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC-AUC MEAN:  0.3383333333333333\n",
      "ROC-AUC STD:  0.10820280598127861\n",
      "PR-AUC MEAN:  0.5540953345746733\n",
      "PR-AUC STD:  0.08668435346119219\n"
     ]
    }
   ],
   "source": [
    "roc_auc_mean = np.mean(roc_auc_scores)\n",
    "roc_auc_std = np.std(roc_auc_scores)\n",
    "pr_auc_mean = np.mean(pr_auc_scores)\n",
    "pr_auc_std = np.std(pr_auc_scores)\n",
    "\n",
    "print(\"ROC-AUC MEAN: \", roc_auc_mean)\n",
    "print(\"ROC-AUC STD: \", roc_auc_std)\n",
    "print(\"PR-AUC MEAN: \", pr_auc_mean)\n",
    "print(\"PR-AUC STD: \", pr_auc_std)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
